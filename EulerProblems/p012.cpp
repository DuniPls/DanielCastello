/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/



/*2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?*/

#include <iostream>
#include <vector>
#include <math.h>


void printIntArray(std::vector<int>& v) {
  for (int i = 0; i < v.size(); i++) {
    std::cout << v[i] << " ";
  }
  std::cout << '\n';
}

bool isFactor(int number, int factor){
  if(factor!=0){
    if (number%factor==0) {
      return true;
    }
  }
  return false;
}

std::vector<int> returnFactors(long n){
  std::vector<int> f;
  long currentN = n;
  for (long i = 1; i < n; i++) {
    if (isFactor(currentN,i)) {
      f.push_back(i);
    }
  }
  f.push_back(n);
  return f;
}

int main()
{
  long currentSum = 0;
  for (size_t i = 1; i < 500; i++) {
    currentSum+=i;
    std::vector<int> f = returnFactors(currentSum);
    std::cout <<currentSum<< ": ";
    printIntArray(f);
    if (f.size()>500) {
      printIntArray(f);
    }
  }
  std::cout << "No result." << '\n';


  return 0;
}
