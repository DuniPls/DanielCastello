/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/
/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/

#include <iostream>

bool multipleOfTwo(int number){
    int multiple = 2;
    int n=0;
    float m=0;
    float difference=0;
    n=number/float(multiple);
    m=number/float(multiple);
    difference=m-float(n);
    if(difference==0){return true;}
    return false;
}

bool multipleOfThree(int number){
    int multiple = 3;
    int n=0;
    float m=0;
    float difference=0;
    n=number/float(multiple);
    m=number/float(multiple);
    difference=m-float(n);
    if(difference==0){return true;}
    return false;
}

bool multipleOfFive(int number){
    int multiple = 5;
    int n=0;
    float m=0;
    float difference=0;
    n=number/float(multiple);
    m=number/float(multiple);
    difference=m-float(n);
    if(difference==0){return true;}
    return false;
}

int nextFibonacciNumber(int n0, int n1){
  return (n0+n1);
}

int fibonacciSequence(int n0, int n1, int maxNum, int currentSum){
  if (multipleOfTwo(nextFibonacciNumber(n0, n1))) {
    currentSum+=nextFibonacciNumber(n0, n1);
  }
  if (nextFibonacciNumber(n0, n1)>=maxNum) {
    return currentSum;
  }
  else{
    fibonacciSequence(n1, nextFibonacciNumber(n0, n1), maxNum, currentSum);
  }
}

int ifMultipleReturn(int number){
    if(multipleOfThree(number) || multipleOfFive(number)){return number;}
    return 0;
}

int main()
{
    int max=4000000;
    int sum=0;

    std::cout<<fibonacciSequence(0,1,max,sum);
    return 0;
}
